#!/usr/bin/env python
"""
Script pour cr√©er des donn√©es de test pour le module Statistiques V√©hicules
G√©n√®re des donn√©es r√©alistes pour d√©montrer toutes les fonctionnalit√©s
"""

import os
import sys
import django
from datetime import datetime, timedelta
import random
from decimal import Decimal

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fleet_management.settings')
django.setup()

from django.contrib.auth.models import User
from fleet_app.models import Vehicule, FeuilleDeRoute, CoutFonctionnement, ConsommationCarburant, Chauffeur, DisponibiliteVehicule
from fleet_app.models_location import LocationVehicule, FeuillePontageLocation, FactureLocation, FournisseurVehicule
from fleet_app.models_inventaire import Produit, EntreeStock, SortieStock


def create_test_user():
    """Cr√©er un utilisateur de test"""
    user, created = User.objects.get_or_create(
        username='demo_stats',
        defaults={
            'email': 'demo@guineegest.com',
            'first_name': 'Demo',
            'last_name': 'Statistics',
            'is_active': True
        }
    )
    if created:
        user.set_password('demo123')
        user.save()
        print("‚úÖ Utilisateur de test cr√©√© : demo_stats / demo123")
    else:
        print("‚úÖ Utilisateur de test existant : demo_stats")
    
    return user


def create_test_vehicules(user):
    """Cr√©er des v√©hicules de test vari√©s"""
    vehicules_data = [
        {
            'id_vehicule': 'TOY-001',
            'immatriculation': 'GN-1234-AB',
            'marque': 'Toyota',
            'modele': 'Hilux',
            'type_moteur': 'Diesel',
            'categorie': '4x4',
            'statut_actuel': 'Actif',
            'date_mise_service': datetime.now().date() - timedelta(days=365*2),
            'kilometrage_initial': 15000
        },
        {
            'id_vehicule': 'NIS-002',
            'immatriculation': 'GN-5678-CD',
            'marque': 'Nissan',
            'modele': 'Navara',
            'type_moteur': 'Diesel',
            'categorie': '4x4',
            'statut_actuel': 'Actif',
            'date_mise_service': datetime.now().date() - timedelta(days=365*3),
            'kilometrage_initial': 25000
        },
        {
            'id_vehicule': 'FOR-003',
            'immatriculation': 'GN-9012-EF',
            'marque': 'Ford',
            'modele': 'Transit',
            'type_moteur': 'Diesel',
            'categorie': 'Camion',
            'statut_actuel': 'En entretien',
            'date_mise_service': datetime.now().date() - timedelta(days=365*1),
            'kilometrage_initial': 8000
        },
        {
            'id_vehicule': 'PEU-004',
            'immatriculation': 'GN-3456-GH',
            'marque': 'Peugeot',
            'modele': '208',
            'type_moteur': 'Essence',
            'categorie': 'Voiture',
            'statut_actuel': 'Actif',
            'date_mise_service': datetime.now().date() - timedelta(days=365*4),
            'kilometrage_initial': 45000
        },
        {
            'id_vehicule': 'MER-005',
            'immatriculation': 'GN-7890-IJ',
            'marque': 'Mercedes',
            'modele': 'Sprinter',
            'type_moteur': 'Diesel',
            'categorie': 'Bus',
            'statut_actuel': 'Hors Service',
            'date_mise_service': datetime.now().date() - timedelta(days=365*5),
            'kilometrage_initial': 120000
        },
        {
            'id_vehicule': 'HON-006',
            'immatriculation': 'GN-2468-KL',
            'marque': 'Honda',
            'modele': 'CRV',
            'type_moteur': 'Essence',
            'categorie': '4x4',
            'statut_actuel': 'Actif',
            'date_mise_service': datetime.now().date() - timedelta(days=365*1),
            'kilometrage_initial': 12000
        },
        {
            'id_vehicule': 'YAM-007',
            'immatriculation': 'GN-1357-MN',
            'marque': 'Yamaha',
            'modele': 'MT-07',
            'type_moteur': 'Essence',
            'categorie': 'Moto',
            'statut_actuel': 'Actif',
            'date_mise_service': datetime.now().date() - timedelta(days=365*2),
            'kilometrage_initial': 8500
        },
        {
            'id_vehicule': 'HYU-008',
            'immatriculation': 'GN-9753-OP',
            'marque': 'Hyundai',
            'modele': 'Tucson',
            'type_moteur': 'Essence',
            'categorie': '4x4',
            'statut_actuel': 'Inactif',
            'date_mise_service': datetime.now().date() - timedelta(days=365*3),
            'kilometrage_initial': 35000
        }
    ]
    
    vehicules = []
    for data in vehicules_data:
        vehicule, created = Vehicule.objects.get_or_create(
            id_vehicule=data['id_vehicule'],
            defaults={**data, 'user': user}
        )
        if created:
            print(f"‚úÖ V√©hicule cr√©√© : {vehicule.immatriculation} - {vehicule.marque} {vehicule.modele}")
        vehicules.append(vehicule)
    
    return vehicules


def create_test_fournisseurs(user):
    """Cr√©er des fournisseurs de v√©hicules de test"""
    fournisseurs_data = [
        {
            'nom': 'AutoRent Guin√©e',
            'contact': 'Mamadou Diallo',
            'telephone': '+224 622 123 456',
            'email': 'contact@autorent-gn.com',
            'adresse': 'Quartier Almamya, Conakry'
        },
        {
            'nom': 'Location Express',
            'contact': 'Fatoumata Camara',
            'telephone': '+224 664 789 012',
            'email': 'info@locationexpress.gn',
            'adresse': 'Matoto, Conakry'
        },
        {
            'nom': 'Fleet Solutions',
            'contact': 'Alpha Bah',
            'telephone': '+224 655 345 678',
            'email': 'alpha@fleetsolutions.gn',
            'adresse': 'Ratoma, Conakry'
        }
    ]
    
    fournisseurs = []
    for data in fournisseurs_data:
        fournisseur, created = FournisseurVehicule.objects.get_or_create(
            nom=data['nom'],
            user=user,
            defaults=data
        )
        if created:
            print(f"‚úÖ Fournisseur cr√©√© : {fournisseur.nom}")
        fournisseurs.append(fournisseur)
    
    return fournisseurs


def create_test_chauffeurs(user):
    """Cr√©er des chauffeurs de test"""
    chauffeurs_data = [
        {
            'nom': 'Diallo',
            'prenom': 'Mamadou',
            'telephone': '+224 622 111 222',
            'numero_permis': 'GN123456789',
            'date_embauche': datetime.now().date() - timedelta(days=365*2)
        },
        {
            'nom': 'Camara',
            'prenom': 'Fatoumata',
            'telephone': '+224 664 333 444',
            'numero_permis': 'GN987654321',
            'date_embauche': datetime.now().date() - timedelta(days=365*3)
        },
        {
            'nom': 'Bah',
            'prenom': 'Alpha',
            'telephone': '+224 655 555 666',
            'numero_permis': 'GN456789123',
            'date_embauche': datetime.now().date() - timedelta(days=365*1)
        },
        {
            'nom': 'Tour√©',
            'prenom': 'Aminata',
            'telephone': '+224 628 777 888',
            'numero_permis': 'GN789123456',
            'date_embauche': datetime.now().date() - timedelta(days=365*4)
        }
    ]
    
    chauffeurs = []
    for data in chauffeurs_data:
        chauffeur, created = Chauffeur.objects.get_or_create(
            numero_permis=data['numero_permis'],
            defaults=data
        )
        if created:
            print(f"‚úÖ Chauffeur cr√©√© : {chauffeur.prenom} {chauffeur.nom}")
        chauffeurs.append(chauffeur)
    
    return chauffeurs


def create_test_feuilles_route(vehicules, chauffeurs, user):
    """Cr√©er des feuilles de route pour les 6 derniers mois"""
    print("üìã Cr√©ation des feuilles de route...")
    
    objets = ['Mission', 'Livraison', 'Personnel']
    destinations = ['Conakry', 'Kindia', 'Mamou', 'Lab√©', 'Kankan', 'N\'Z√©r√©kor√©', 'Bok√©', 'Faranah']
    
    start_date = datetime.now().date() - timedelta(days=180)  # 6 mois
    end_date = datetime.now().date()
    
    created_count = 0
    for vehicule in vehicules:
        current_date = start_date
        while current_date <= end_date:
            # Cr√©er une feuille tous les 3-5 jours en moyenne
            if random.random() < 0.25:  # 25% de chance par jour
                chauffeur = random.choice(chauffeurs)
                
                # Donn√©es de base
                km_depart = vehicule.kilometrage_initial + random.randint(0, 50000)
                distance = random.randint(50, 500)
                km_retour = km_depart + distance
                
                carburant_depart = random.uniform(20, 80)
                consommation_100km = random.uniform(6, 15)
                carburant_utilise = (distance * consommation_100km) / 100
                carburant_retour = max(0, carburant_depart - carburant_utilise)
                
                heure_depart = datetime.now().time().replace(
                    hour=random.randint(6, 10),
                    minute=random.randint(0, 59)
                )
                
                duree_mission = random.randint(2, 10)  # heures
                heure_retour = (datetime.combine(current_date, heure_depart) + 
                               timedelta(hours=duree_mission)).time()
                
                feuille, created = FeuilleDeRoute.objects.get_or_create(
                    vehicule=vehicule,
                    chauffeur=chauffeur,
                    date_depart=current_date,
                    defaults={
                        'heure_depart': heure_depart,
                        'destination': random.choice(destinations),
                        'objet_deplacement': random.choice(objets),
                        'signature_gestionnaire': True,
                        'km_depart': km_depart,
                        'carburant_depart': round(carburant_depart, 2),
                        'km_retour': km_retour,
                        'carburant_retour': round(carburant_retour, 2),
                        'date_retour': current_date,
                        'heure_retour': heure_retour,
                        'signature_chauffeur': True,
                        'distance_parcourue': distance,
                        'carburant_utilise': round(carburant_utilise, 2),
                        'consommation': round(consommation_100km, 2),
                        'alerte_surconsommation': consommation_100km > 12
                    }
                )
                if created:
                    created_count += 1
            
            current_date += timedelta(days=1)
    
    print(f"‚úÖ {created_count} feuilles de route cr√©√©es")


def create_test_disponibilites(vehicules, user):
    """Cr√©er des donn√©es de disponibilit√© des v√©hicules"""
    print("üìä Cr√©ation des disponibilit√©s...")
    
    created_count = 0
    start_date = datetime.now().date() - timedelta(days=180)
    
    for vehicule in vehicules:
        # Cr√©er des p√©riodes de disponibilit√© mensuelles
        current_date = start_date
        while current_date <= datetime.now().date():
            # P√©riode d'un mois
            if current_date.day == 1:  # Premier jour du mois
                fin_mois = (current_date.replace(day=28) + timedelta(days=4)).replace(day=1) - timedelta(days=1)
                
                # Calculer la disponibilit√© selon le statut du v√©hicule
                if vehicule.statut_actuel == 'Actif':
                    heures_disponibles = random.randint(600, 720)  # 20-24h par jour
                elif vehicule.statut_actuel == 'En entretien':
                    heures_disponibles = random.randint(300, 500)  # 10-16h par jour
                elif vehicule.statut_actuel == 'Hors Service':
                    heures_disponibles = random.randint(0, 200)   # 0-6h par jour
                else:  # Inactif
                    heures_disponibles = random.randint(100, 400)  # 3-13h par jour
                
                jours_mois = (fin_mois - current_date).days + 1
                heures_totales = jours_mois * 24
                pourcentage = (heures_disponibles / heures_totales) * 100
                
                jours_hs = random.randint(0, max(1, int(jours_mois * 0.1)))  # Max 10% du mois
                
                disponibilite, created = DisponibiliteVehicule.objects.get_or_create(
                    vehicule=vehicule,
                    date_debut=current_date,
                    date_fin=fin_mois,
                    user=user,
                    defaults={
                        'heures_disponibles': heures_disponibles,
                        'heures_totales': heures_totales,
                        'disponibilite_pourcentage': round(pourcentage, 2),
                        'raison_indisponibilite': random.choice([
                            'Entretien pr√©ventif',
                            'R√©paration',
                            'Panne',
                            'Maintenance',
                            ''
                        ]) if pourcentage < 80 else '',
                        'periode': f"{current_date.strftime('%B %Y')}",
                        'jours_total_periode': jours_mois,
                        'jours_hors_service': jours_hs
                    }
                )
                if created:
                    created_count += 1
            
            current_date += timedelta(days=1)
    
    print(f"‚úÖ {created_count} disponibilit√©s cr√©√©es")


def create_test_couts_fonctionnement(vehicules, user):
    """Cr√©er des co√ªts de fonctionnement (entretien)"""
    print("üí∞ Cr√©ation des co√ªts d'entretien...")
    
    types_entretien = [
        ('Vidange moteur', 75000, 150000),
        ('Changement filtres', 25000, 50000),
        ('R√©paration freins', 100000, 300000),
        ('Changement pneus', 200000, 800000),
        ('R√©paration transmission', 300000, 1000000),
        ('Entretien climatisation', 50000, 200000),
        ('R√©paration √©lectrique', 75000, 400000),
        ('Carrosserie', 100000, 500000)
    ]
    
    created_count = 0
    start_date = datetime.now().date() - timedelta(days=180)
    
    for vehicule in vehicules:
        # Nombre d'interventions selon l'√¢ge et le type de v√©hicule
        nb_interventions = random.randint(3, 12)
        
        for _ in range(nb_interventions):
            date_intervention = start_date + timedelta(days=random.randint(0, 180))
            type_entretien, cout_min, cout_max = random.choice(types_entretien)
            montant = random.randint(cout_min, cout_max)
            
            cout, created = CoutFonctionnement.objects.get_or_create(
                vehicule=vehicule,
                date=date_intervention,
                type_cout='Entretien',
                montant=montant,
                user=user,
                defaults={
                    'description': type_entretien,
                    'fournisseur': random.choice(['Garage Central', 'Auto Service', 'M√©canique Express', 'Atelier Pro'])
                }
            )
            if created:
                created_count += 1
    
    print(f"‚úÖ {created_count} co√ªts d'entretien cr√©√©s")


def create_test_consommation_carburant(vehicules, user):
    """Cr√©er des donn√©es de consommation carburant"""
    print("‚õΩ Cr√©ation des consommations carburant...")
    
    created_count = 0
    start_date = datetime.now().date() - timedelta(days=180)
    
    for vehicule in vehicules:
        # Consommation selon le type de v√©hicule
        if vehicule.categorie == 'Moto':
            conso_constructeur = random.uniform(3, 5)  # L/100km
        elif vehicule.categorie == 'Voiture':
            conso_constructeur = random.uniform(7, 12)
        elif vehicule.categorie == '4x4':
            conso_constructeur = random.uniform(10, 15)
        elif vehicule.categorie == 'Camion':
            conso_constructeur = random.uniform(15, 25)
        else:  # Bus
            conso_constructeur = random.uniform(20, 35)
        
        # Cr√©er des mesures de consommation tous les 15-30 jours
        current_date = start_date
        while current_date <= datetime.now().date():
            if random.random() < 0.05:  # 5% de chance par jour (environ tous les 20 jours)
                # Premi√®re mesure
                date_plein1 = current_date
                km_plein1 = vehicule.kilometrage_initial + random.randint(0, 50000)
                
                # Deuxi√®me mesure (7-15 jours plus tard)
                jours_entre_pleins = random.randint(7, 15)
                date_plein2 = date_plein1 + timedelta(days=jours_entre_pleins)
                
                # Distance parcourue
                distance = random.randint(200, 1500)
                km_plein2 = km_plein1 + distance
                
                # Litres ajout√©s (avec variation r√©aliste)
                conso_reelle = conso_constructeur * random.uniform(0.8, 1.3)  # ¬±30% variation
                litres_ajoutes = (distance * conso_reelle) / 100
                
                # Calcul de la consommation aux 100km
                consommation_100km = (litres_ajoutes * 100) / distance
                
                # √âcart avec le constructeur
                ecart = consommation_100km - conso_constructeur
                
                consommation, created = ConsommationCarburant.objects.get_or_create(
                    vehicule=vehicule,
                    date_plein1=date_plein1,
                    date_plein2=date_plein2,
                    user=user,
                    defaults={
                        'km_plein1': km_plein1,
                        'km_plein2': km_plein2,
                        'litres_ajoutes': round(litres_ajoutes, 2),
                        'distance_parcourue': distance,
                        'consommation_100km': round(consommation_100km, 2),
                        'consommation_constructeur': round(conso_constructeur, 2),
                        'ecart_constructeur': round(ecart, 2)
                    }
                )
                if created:
                    created_count += 1
                    current_date = date_plein2  # Avancer √† la date du 2√®me plein
            
            current_date += timedelta(days=1)
    
    print(f"‚úÖ {created_count} consommations carburant cr√©√©es")


def create_test_locations(vehicules, fournisseurs, user):
    """Cr√©er des locations de v√©hicules"""
    print("üöó Cr√©ation des locations...")
    
    created_count = 0
    start_date = datetime.now().date() - timedelta(days=120)  # 4 mois
    
    # S√©lectionner quelques v√©hicules pour les locations externes
    vehicules_location = random.sample(vehicules, min(4, len(vehicules)))
    
    for vehicule in vehicules_location:
        # Cr√©er 1-3 locations par v√©hicule
        nb_locations = random.randint(1, 3)
        
        for i in range(nb_locations):
            date_debut = start_date + timedelta(days=random.randint(0, 90))
            duree = random.randint(15, 60)  # 15 √† 60 jours
            date_fin = date_debut + timedelta(days=duree)
            
            type_location = random.choice(['Interne', 'Externe'])
            fournisseur = random.choice(fournisseurs) if type_location == 'Externe' else None
            
            # Tarif selon le type de v√©hicule
            if vehicule.categorie == 'Moto':
                tarif_base = random.randint(15000, 25000)
            elif vehicule.categorie == 'Voiture':
                tarif_base = random.randint(30000, 50000)
            elif vehicule.categorie == '4x4':
                tarif_base = random.randint(50000, 80000)
            elif vehicule.categorie == 'Camion':
                tarif_base = random.randint(70000, 120000)
            else:  # Bus
                tarif_base = random.randint(80000, 150000)
            
            location, created = LocationVehicule.objects.get_or_create(
                vehicule=vehicule,
                date_debut=date_debut,
                user=user,
                defaults={
                    'type_location': type_location,
                    'fournisseur': fournisseur,
                    'date_fin': date_fin,
                    'tarif_journalier': tarif_base,
                    'statut': random.choice(['Active', 'Inactive', 'Cl√¥tur√©e']),
                    'motif': random.choice(['Mission terrain', 'Transport personnel', 'Livraison', 'D√©placement officiel'])
                }
            )
            if created:
                created_count += 1
                
                # Cr√©er des feuilles de pontage pour cette location
                create_test_pontages(location, user)
    
    print(f"‚úÖ {created_count} locations cr√©√©es")


def create_test_pontages(location, user):
    """Cr√©er des feuilles de pontage pour une location"""
    current_date = location.date_debut
    end_date = min(location.date_fin or datetime.now().date(), datetime.now().date())
    
    while current_date <= end_date:
        # 80% de chance d'avoir une feuille de pontage par jour
        if random.random() < 0.8:
            statut = random.choices(
                ['Travail', 'Entretien', 'Hors service'],
                weights=[85, 10, 5]
            )[0]
            
            FeuillePontageLocation.objects.get_or_create(
                location=location,
                date=current_date,
                user=user,
                defaults={
                    'statut': statut,
                    'commentaire': random.choice([
                        'Mission accomplie',
                        'Transport effectu√©',
                        'Maintenance pr√©ventive',
                        'R√©paration mineure',
                        'RAS',
                        ''
                    ])
                }
            )
        
        current_date += timedelta(days=1)


def create_test_factures(user):
    """Cr√©er des factures de location"""
    print("üßæ Cr√©ation des factures...")
    
    locations = LocationVehicule.objects.filter(user=user)
    created_count = 0
    
    for location in locations:
        # 70% de chance d'avoir une facture
        if random.random() < 0.7:
            # Calculer le montant bas√© sur les jours de travail
            jours_travail = location.feuilles.filter(statut='Travail').count()
            
            if jours_travail > 0:
                montant_ht = jours_travail * location.tarif_journalier
                tva = montant_ht * 0.18  # TVA 18%
                montant_ttc = montant_ht + tva
                
                numero = f"FACT-{location.pk}-{random.randint(1000, 9999)}"
                
                facture, created = FactureLocation.objects.get_or_create(
                    location=location,
                    user=user,
                    defaults={
                        'numero': numero,
                        'date_facture': location.date_debut + timedelta(days=random.randint(5, 30)),
                        'montant_ht': montant_ht,
                        'tva': tva,
                        'montant_ttc': montant_ttc,
                        'statut': random.choice(['Brouillon', 'Envoy√©e', 'Pay√©e']),
                        'date_echeance': location.date_debut + timedelta(days=random.randint(30, 60))
                    }
                )
                if created:
                    created_count += 1
    
    print(f"‚úÖ {created_count} factures cr√©√©es")


def create_test_pieces_detachees(vehicules, user):
    """Cr√©er des donn√©es de pi√®ces d√©tach√©es utilis√©es"""
    print("üîß Cr√©ation des sorties de pi√®ces d√©tach√©es...")
    
    # Cr√©er quelques produits (pi√®ces d√©tach√©es) si ils n'existent pas
    pieces_data = [
        ('Filtre √† huile', 15000, 'Pi√®ce'),
        ('Filtre √† air', 12000, 'Pi√®ce'),
        ('Plaquettes de frein', 45000, 'Pi√®ce'),
        ('Disque de frein', 85000, 'Pi√®ce'),
        ('Pneu', 180000, 'Pi√®ce'),
        ('Batterie', 120000, 'Pi√®ce'),
        ('Amortisseur', 95000, 'Pi√®ce'),
        ('Courroie', 25000, 'Pi√®ce'),
        ('Bougie', 8000, 'Pi√®ce'),
        ('Huile moteur (5L)', 35000, 'Consommable')
    ]
    
    produits = []
    for nom, prix, type_produit in pieces_data:
        produit, created = Produit.objects.get_or_create(
            nom=nom,
            defaults={
                'prix_unitaire': prix,
                'type_produit': type_produit,
                'stock_minimum': 5,
                'stock_actuel': random.randint(10, 50),
                'unite': 'Unit√©'
            }
        )
        produits.append(produit)
    
    # Cr√©er des sorties de stock pour les v√©hicules
    created_count = 0
    start_date = datetime.now().date() - timedelta(days=180)
    
    for vehicule in vehicules:
        # Nombre de sorties selon l'activit√© du v√©hicule
        nb_sorties = random.randint(5, 20)
        
        for _ in range(nb_sorties):
            date_sortie = start_date + timedelta(days=random.randint(0, 180))
            produit = random.choice(produits)
            quantite = random.randint(1, 4)
            
            # Note: Le mod√®le SortieStock pourrait ne pas avoir de champ user
            # On essaie de cr√©er avec, sinon sans
            try:
                sortie, created = SortieStock.objects.get_or_create(
                    produit=produit,
                    date=date_sortie,
                    vehicule=vehicule,
                    quantite=quantite,
                    defaults={
                        'prix_unitaire': produit.prix_unitaire,
                        'motif': 'Entretien v√©hicule',
                        'destination': f'V√©hicule {vehicule.immatriculation}',
                        'stock_avant': produit.stock_actuel + quantite,
                        'stock_apres': produit.stock_actuel
                    }
                )
                if created:
                    created_count += 1
            except Exception as e:
                # Si le mod√®le n'a pas de champ user, on continue
                print(f"‚ö†Ô∏è  Impossible de cr√©er sortie stock: {e}")
                continue
    
    print(f"‚úÖ {created_count} sorties de pi√®ces cr√©√©es")


def main():
    """Fonction principale pour cr√©er toutes les donn√©es de test"""
    print("üöÄ Cr√©ation des donn√©es de test pour le module Statistiques V√©hicules")
    print("=" * 70)
    
    try:
        # 1. Cr√©er l'utilisateur de test
        user = create_test_user()
        
        # 2. Cr√©er les v√©hicules
        vehicules = create_test_vehicules(user)
        
        # 3. Cr√©er les fournisseurs
        fournisseurs = create_test_fournisseurs(user)
        
        # 4. Cr√©er les chauffeurs
        chauffeurs = create_test_chauffeurs(user)
        
        # 5. Cr√©er les feuilles de route
        create_test_feuilles_route(vehicules, chauffeurs, user)
        
        # 6. Cr√©er les disponibilit√©s
        create_test_disponibilites(vehicules, user)
        
        # 7. Cr√©er les co√ªts d'entretien
        create_test_couts_fonctionnement(vehicules, user)
        
        # 8. Cr√©er les consommations carburant
        create_test_consommation_carburant(vehicules, user)
        
        # 9. Cr√©er les locations
        create_test_locations(vehicules, fournisseurs, user)
        
        # 10. Cr√©er les factures
        create_test_factures(user)
        
        # 11. Cr√©er les sorties de pi√®ces d√©tach√©es
        create_test_pieces_detachees(vehicules, user)
        
        print("\n" + "=" * 70)
        print("üéâ DONN√âES DE TEST CR√â√âES AVEC SUCC√àS !")
        print("=" * 70)
        print("üìä R√©sum√© des donn√©es cr√©√©es :")
        print(f"   üë§ Utilisateur : demo_stats (mot de passe: demo123)")
        print(f"   üöó V√©hicules : {len(vehicules)}")
        print(f"   üè¢ Fournisseurs : {len(fournisseurs)}")
        print(f"   üìã Feuilles de route : {FeuilleDeRoute.objects.filter(user=user).count()}")
        print(f"   üí∞ Co√ªts d'entretien : {CoutFonctionnement.objects.filter(user=user).count()}")
        print(f"   ‚õΩ Consommations carburant : {ConsommationCarburant.objects.filter(user=user).count()}")
        print(f"   üöó Locations : {LocationVehicule.objects.filter(user=user).count()}")
        print(f"   üìã Feuilles de pontage : {FeuillePontageLocation.objects.filter(user=user).count()}")
        print(f"   üßæ Factures : {FactureLocation.objects.filter(user=user).count()}")
        
        print("\nüåê Pour tester le module :")
        print("   1. Connectez-vous avec : demo_stats / demo123")
        print("   2. Allez dans Menu KPIs ‚Üí Statistiques V√©hicules")
        print("   3. Testez les filtres dynamiques et les fonctionnalit√©s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es : {e}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
