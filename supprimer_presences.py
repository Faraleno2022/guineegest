#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour supprimer compl√®tement tout le syst√®me de pr√©sences
"""

import os
import shutil

def supprimer_fichiers_presences():
    """
    Supprime tous les fichiers li√©s aux pr√©sences
    """
    print("üóëÔ∏è SUPPRESSION DES FICHIERS DE PR√âSENCES")
    print("="*60)
    
    # Fichiers √† supprimer
    fichiers_a_supprimer = [
        r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\templates\fleet_app\entreprise\presence_journaliere_list.html',
        r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\templates\fleet_app\entreprise\legende_presence.html',
        r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\templates\fleet_app\entreprise\fix_presences.html',
        r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\views_presence_update.py',
        r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\static\fleet_app\js\presence_calculs.js',
        r'c:\Users\faral\Desktop\Gestion_parck\verification_colonne_mt_presences.py',
        r'c:\Users\faral\Desktop\Gestion_parck\verification_calcul_mt_presences.py',
        r'c:\Users\faral\Desktop\Gestion_parck\verification_calculs_presences.py',
        r'c:\Users\faral\Desktop\Gestion_parck\test_presence_update.py'
    ]
    
    fichiers_supprimes = 0
    
    for fichier in fichiers_a_supprimer:
        if os.path.exists(fichier):
            try:
                os.remove(fichier)
                print(f"üóëÔ∏è Supprim√© : {os.path.basename(fichier)}")
                fichiers_supprimes += 1
            except Exception as e:
                print(f"‚ùå Erreur suppression {os.path.basename(fichier)}: {e}")
        else:
            print(f"‚ö†Ô∏è Fichier non trouv√© : {os.path.basename(fichier)}")
    
    return fichiers_supprimes

def nettoyer_vues_presences():
    """
    Supprime les fonctions li√©es aux pr√©sences dans les vues
    """
    print("\nüßπ NETTOYAGE DES VUES")
    print("="*60)
    
    # Fichiers de vues √† nettoyer
    vues_a_nettoyer = [
        r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\views_entreprise.py',
        r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\views_management.py'
    ]
    
    fonctions_presences = [
        'presence_journaliere_list',
        'presence_journaliere_update',
        'presence_journaliere_export',
        'presence_journaliere_import'
    ]
    
    vues_nettoyees = 0
    
    for vue_file in vues_a_nettoyer:
        if os.path.exists(vue_file):
            try:
                # Lire le contenu
                with open(vue_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Cr√©er une sauvegarde
                backup_file = vue_file + '.backup_avant_suppression'
                with open(backup_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                # Supprimer les fonctions de pr√©sences
                import re
                
                for fonction in fonctions_presences:
                    # Pattern pour supprimer la fonction compl√®te
                    pattern = rf'@[^\n]*\ndef {fonction}\([^)]*\):.*?(?=\n@|\ndef |\nclass |\Z)'
                    content = re.sub(pattern, '', content, flags=re.DOTALL)
                
                # √âcrire le fichier nettoy√©
                with open(vue_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print(f"üßπ Vue nettoy√©e : {os.path.basename(vue_file)}")
                vues_nettoyees += 1
                
            except Exception as e:
                print(f"‚ùå Erreur nettoyage {os.path.basename(vue_file)}: {e}")
    
    return vues_nettoyees

def nettoyer_urls_presences():
    """
    Supprime les URLs li√©es aux pr√©sences
    """
    print("\nüîó NETTOYAGE DES URLS")
    print("="*60)
    
    urls_file = r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\urls.py'
    
    if os.path.exists(urls_file):
        try:
            # Lire le contenu
            with open(urls_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Cr√©er une sauvegarde
            backup_file = urls_file + '.backup_avant_suppression'
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Supprimer les lignes contenant 'presence'
            lines = content.split('\n')
            new_lines = []
            
            for line in lines:
                if 'presence' not in line.lower():
                    new_lines.append(line)
                else:
                    print(f"üîó URL supprim√©e : {line.strip()}")
            
            # √âcrire le fichier nettoy√©
            with open(urls_file, 'w', encoding='utf-8') as f:
                f.write('\n'.join(new_lines))
            
            print(f"üîó URLs nettoy√©es dans : {os.path.basename(urls_file)}")
            return 1
            
        except Exception as e:
            print(f"‚ùå Erreur nettoyage URLs: {e}")
            return 0
    else:
        print(f"‚ö†Ô∏è Fichier URLs non trouv√©")
        return 0

def nettoyer_modeles_presences():
    """
    Commente les mod√®les de pr√©sences dans models.py
    """
    print("\nüìä NETTOYAGE DES MOD√àLES")
    print("="*60)
    
    models_file = r'c:\Users\faral\Desktop\Gestion_parck\fleet_app\models.py'
    
    if os.path.exists(models_file):
        try:
            # Lire le contenu
            with open(models_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Cr√©er une sauvegarde
            backup_file = models_file + '.backup_avant_suppression'
            with open(backup_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Commenter les classes de pr√©sences
            import re
            
            # Pattern pour trouver les classes de pr√©sences
            pattern = r'(class.*Presence.*:.*?)(?=\nclass|\Z)'
            
            def comment_class(match):
                class_content = match.group(1)
                commented = '\n'.join(f'# {line}' for line in class_content.split('\n'))
                return commented
            
            content = re.sub(pattern, comment_class, content, flags=re.DOTALL)
            
            # √âcrire le fichier modifi√©
            with open(models_file, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"üìä Mod√®les comment√©s dans : {os.path.basename(models_file)}")
            return 1
            
        except Exception as e:
            print(f"‚ùå Erreur nettoyage mod√®les: {e}")
            return 0
    else:
        print(f"‚ö†Ô∏è Fichier models.py non trouv√©")
        return 0

def main():
    """
    Fonction principale de suppression compl√®te des pr√©sences
    """
    print("üóëÔ∏è SUPPRESSION COMPL√àTE DU SYST√àME DE PR√âSENCES")
    print("="*80)
    print("Suppression de tous les fichiers, vues, URLs et mod√®les li√©s aux pr√©sences")
    print()
    
    # Supprimer les fichiers
    fichiers_supprimes = supprimer_fichiers_presences()
    
    # Nettoyer les vues
    vues_nettoyees = nettoyer_vues_presences()
    
    # Nettoyer les URLs
    urls_nettoyees = nettoyer_urls_presences()
    
    # Nettoyer les mod√®les
    modeles_nettoyes = nettoyer_modeles_presences()
    
    print(f"\nüéØ R√âSUM√â DE LA SUPPRESSION :")
    print(f"üóëÔ∏è Fichiers supprim√©s: {fichiers_supprimes}")
    print(f"üßπ Vues nettoy√©es: {vues_nettoyees}")
    print(f"üîó URLs nettoy√©es: {urls_nettoyees}")
    print(f"üìä Mod√®les comment√©s: {modeles_nettoyes}")
    
    print(f"\n‚ö†Ô∏è IMPORTANT :")
    print("- Les sauvegardes ont √©t√© cr√©√©es avec l'extension .backup_avant_suppression")
    print("- Les mod√®les ont √©t√© comment√©s (pas supprim√©s) pour √©viter les erreurs de migration")
    print("- Le serveur Django va red√©marrer automatiquement")
    print("- Vous devrez peut-√™tre faire des migrations Django si n√©cessaire")
    
    print(f"\nüéâ SUPPRESSION COMPL√àTE TERMIN√âE !")
    print("Le syst√®me de pr√©sences a √©t√© compl√®tement supprim√© du projet.")
    
    return True

if __name__ == "__main__":
    main()
