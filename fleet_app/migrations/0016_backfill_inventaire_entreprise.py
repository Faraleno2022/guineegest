# Generated by Django 5.2.6 on 2025-09-25 15:55

from django.db import migrations


def backfill_inventory_entreprise(apps, schema_editor):
    Produit = apps.get_model('fleet_app', 'Produit')
    EntreeStock = apps.get_model('fleet_app', 'EntreeStock')
    SortieStock = apps.get_model('fleet_app', 'SortieStock')
    MouvementStock = apps.get_model('fleet_app', 'MouvementStock')
    Commande = apps.get_model('fleet_app', 'Commande')
    LigneCommande = apps.get_model('fleet_app', 'LigneCommande')
    Profil = apps.get_model('fleet_app', 'Profil')

    # user_id -> entreprise_id via Profil if exists
    user_to_ent = {}
    for profil in Profil.objects.all():
        try:
            ent = profil.entreprise
            if ent and profil.user_id:
                user_to_ent[profil.user_id] = ent.id
        except Exception:
            pass

    # Backfill Produit via user mapping
    produits_updates = []
    for p in Produit.objects.all():
        if getattr(p, 'entreprise_id', None) is None:
            ent_id = user_to_ent.get(getattr(p, 'user_id', None))
            if ent_id:
                p.entreprise_id = ent_id
                produits_updates.append(p)
    if produits_updates:
        Produit.objects.bulk_update(produits_updates, ['entreprise'])

    # Backfill Entree/Sortie/Mouvement via produit.entreprise
    def set_ent_from_product(qs):
        updates = []
        for obj in qs.select_related('produit').all():
            if getattr(obj, 'entreprise_id', None) is None and getattr(obj, 'produit_id', None):
                ent_id = getattr(getattr(obj, 'produit', None), 'entreprise_id', None)
                if ent_id:
                    obj.entreprise_id = ent_id
                    updates.append(obj)
        if updates:
            qs.model.objects.bulk_update(updates, ['entreprise'])

    set_ent_from_product(EntreeStock.objects)
    set_ent_from_product(SortieStock.objects)
    set_ent_from_product(MouvementStock.objects)

    # Backfill LigneCommande via produit.entreprise
    updates = []
    for lc in LigneCommande.objects.select_related('produit').all():
        if getattr(lc, 'entreprise_id', None) is None and getattr(lc, 'produit_id', None):
            ent_id = getattr(getattr(lc, 'produit', None), 'entreprise_id', None)
            if ent_id:
                lc.entreprise_id = ent_id
                updates.append(lc)
    if updates:
        LigneCommande.objects.bulk_update(updates, ['entreprise'])

    # Backfill Commande via first related LigneCommande's entreprise if any
    updates_cmd = []
    for cmd in Commande.objects.all():
        if getattr(cmd, 'entreprise_id', None) is None:
            lc = cmd.lignes.order_by('id').first()
            if lc and getattr(lc, 'entreprise_id', None):
                cmd.entreprise_id = lc.entreprise_id
                updates_cmd.append(cmd)
    if updates_cmd:
        Commande.objects.bulk_update(updates_cmd, ['entreprise'])


def noop_reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('fleet_app', '0015_commande_entreprise_entreestock_entreprise_and_more'),
    ]

    operations = [
        migrations.RunPython(backfill_inventory_entreprise, noop_reverse),
    ]
