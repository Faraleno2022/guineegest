"""
Utilitaires pour la gestion de l'archivage mensuel et la transition entre les mois.

Ce module contient les fonctions n√©cessaires pour :
- Pr√©parer les donn√©es pour le nouveau mois apr√®s archivage
- V√©rifier la coh√©rence des donn√©es de r√©f√©rence
- Initialiser les structures n√©cessaires pour le nouveau mois
"""

from django.db import transaction
from django.utils import timezone
from datetime import datetime, timedelta
import calendar
from decimal import Decimal


def preparer_nouveau_mois(user, nouveau_mois, nouvelle_annee):
    """
    Pr√©pare les structures de donn√©es pour le nouveau mois apr√®s archivage.
    
    DONN√âES CONSERV√âES (r√©f√©rence) :
    - employes/ : Matricule, Employ√©, Fonction, Salaire de base, Statut
    - Configuration des montants par employ√©
    - L√©gende des statuts et montants
    - Param√®tres de paie : Matricule, Pr√©nom, Nom, Fonction, Salaire Base
    
    DONN√âES R√âINITIALIS√âES (transactionnelles) :
    - presences/ : toutes les donn√©es de pointage
    - paies/ : toutes les paies calcul√©es
    - heures-supplementaires/ : toutes les heures suppl√©mentaires
    - bulletins/ : tous les bulletins g√©n√©r√©s
    """
    from .models import Employe, ParametrePaie
    from .models_entreprise import ConfigurationMontantEmploye, ConfigurationMontantStatut
    
    print(f"üÜï NOUVEAU MOIS: Pr√©paration pour {nouveau_mois:02d}/{nouvelle_annee}")
    
    # R√©cup√©rer tous les employ√©s actifs (donn√©es de r√©f√©rence conserv√©es)
    employes_actifs = Employe.objects.filter(user=user, statut='Actif')
    employes_inactifs = Employe.objects.filter(user=user, statut='Inactif')
    
    # V√©rifier que les configurations de montants existent pour tous les employ√©s
    employes_sans_config = []
    for employe in employes_actifs:
        config = ConfigurationMontantEmploye.objects.filter(employe=employe).first()
        if not config:
            employes_sans_config.append(employe)
    
    # Statistiques des donn√©es de r√©f√©rence conserv√©es
    stats_reference = {
        'employes_actifs': employes_actifs.count(),
        'employes_inactifs': employes_inactifs.count(),
        'employes_sans_config': len(employes_sans_config),
        'parametres_paie': ParametrePaie.objects.filter(user=user).count(),
        'configurations_statuts': ConfigurationMontantStatut.objects.filter(user=user).count()
    }
    
    # Calculer le nombre de jours du nouveau mois
    nb_jours_mois = calendar.monthrange(nouvelle_annee, nouveau_mois)[1]
    
    # Informations sur le nouveau mois
    info_nouveau_mois = {
        'mois': nouveau_mois,
        'annee': nouvelle_annee,
        'nb_jours': nb_jours_mois,
        'nom_mois': calendar.month_name[nouveau_mois],
        'premier_jour': datetime(nouvelle_annee, nouveau_mois, 1).date(),
        'dernier_jour': datetime(nouvelle_annee, nouveau_mois, nb_jours_mois).date()
    }
    
    print(f"‚úÖ NOUVEAU MOIS: Donn√©es de r√©f√©rence conserv√©es:")
    print(f"   üë• Employ√©s actifs: {stats_reference['employes_actifs']}")
    print(f"   üí§ Employ√©s inactifs: {stats_reference['employes_inactifs']}")
    print(f"   ‚öôÔ∏è Param√®tres de paie: {stats_reference['parametres_paie']}")
    print(f"   üí∞ Configurations montants: {stats_reference['configurations_statuts']}")
    print(f"   üìÖ Nouveau mois: {info_nouveau_mois['nom_mois']} {nouvelle_annee} ({nb_jours_mois} jours)")
    
    if employes_sans_config:
        print(f"   ‚ö†Ô∏è Employ√©s sans configuration de montants: {len(employes_sans_config)}")
        for emp in employes_sans_config:
            print(f"      - {emp.matricule} {emp.prenom} {emp.nom}")
    
    return {
        'stats_reference': stats_reference,
        'info_nouveau_mois': info_nouveau_mois,
        'employes_sans_config': employes_sans_config,
        'success': True
    }


def verifier_coherence_donnees_reference(user):
    """
    V√©rifie la coh√©rence des donn√©es de r√©f√©rence avant/apr√®s archivage.
    
    Contr√¥le que toutes les donn√©es de r√©f√©rence sont bien pr√©sentes et coh√©rentes.
    """
    from .models import Employe, ParametrePaie
    from .models_entreprise import ConfigurationMontantEmploye, ConfigurationMontantStatut
    
    print(f"üîç V√âRIFICATION: Coh√©rence des donn√©es de r√©f√©rence")
    
    incoh√©rences = []
    
    # V√©rifier les employ√©s
    employes = Employe.objects.filter(user=user)
    for employe in employes:
        # V√©rifier que chaque employ√© a une configuration de montants
        config = ConfigurationMontantEmploye.objects.filter(employe=employe).first()
        if not config:
            incoh√©rences.append(f"Employ√© {employe.matricule} sans configuration de montants")
        
        # V√©rifier les champs obligatoires
        if not employe.matricule:
            incoh√©rences.append(f"Employ√© {employe.id} sans matricule")
        if not employe.fonction:
            incoh√©rences.append(f"Employ√© {employe.matricule} sans fonction")
        if not employe.salaire_journalier:
            incoh√©rences.append(f"Employ√© {employe.matricule} sans salaire de base")
    
    # V√©rifier les param√®tres de paie
    parametres_requis = ['taux_cnss', 'taux_rts', 'salaire_minimum']
    for param_requis in parametres_requis:
        param = ParametrePaie.objects.filter(user=user, cle=param_requis).first()
        if not param:
            incoh√©rences.append(f"Param√®tre de paie manquant: {param_requis}")
    
    # V√©rifier les configurations de statuts
    statuts_requis = ['P(Am)', 'P(Pm)', 'P(Am&Pm)', 'Dimanche', 'Absent', 'Maladie', 'M.Payer', 'J Repos', 'Cong√©', 'Formation', 'Mt F√©ri√©']
    for statut in statuts_requis:
        config = ConfigurationMontantStatut.objects.filter(user=user, statut=statut).first()
        if not config:
            incoh√©rences.append(f"Configuration de statut manquante: {statut}")
    
    if incoh√©rences:
        print(f"‚ùå V√âRIFICATION: {len(incoh√©rences)} incoh√©rence(s) d√©tect√©e(s):")
        for incoh√©rence in incoh√©rences:
            print(f"   - {incoh√©rence}")
    else:
        print(f"‚úÖ V√âRIFICATION: Toutes les donn√©es de r√©f√©rence sont coh√©rentes")
    
    return {
        'coherent': len(incoh√©rences) == 0,
        'incoherences': incoh√©rences,
        'nb_employes': employes.count(),
        'nb_parametres': ParametrePaie.objects.filter(user=user).count(),
        'nb_configs_statuts': ConfigurationMontantStatut.objects.filter(user=user).count()
    }


def nettoyer_donnees_transactionnelles_orphelines(user):
    """
    Nettoie les donn√©es transactionnelles qui pourraient √™tre orphelines
    apr√®s un archivage incomplet.
    """
    from .models import PresenceJournaliere, PaieEmploye, HeureSupplementaire
    
    print(f"üßπ NETTOYAGE: Suppression des donn√©es transactionnelles orphelines")
    
    # Compter les donn√©es avant nettoyage
    presences_avant = PresenceJournaliere.objects.filter(employe__user=user).count()
    paies_avant = PaieEmploye.objects.filter(employe__user=user).count()
    heures_avant = HeureSupplementaire.objects.filter(employe__user=user).count()
    
    # Supprimer les donn√©es orphelines (employ√©s supprim√©s)
    employes_existants = Employe.objects.filter(user=user).values_list('id', flat=True)
    
    presences_orphelines = PresenceJournaliere.objects.exclude(employe_id__in=employes_existants).delete()
    paies_orphelines = PaieEmploye.objects.exclude(employe_id__in=employes_existants).delete()
    heures_orphelines = HeureSupplementaire.objects.exclude(employe_id__in=employes_existants).delete()
    
    # Compter les donn√©es apr√®s nettoyage
    presences_apres = PresenceJournaliere.objects.filter(employe__user=user).count()
    paies_apres = PaieEmploye.objects.filter(employe__user=user).count()
    heures_apres = HeureSupplementaire.objects.filter(employe__user=user).count()
    
    print(f"üßπ NETTOYAGE TERMIN√â:")
    print(f"   üìä Pr√©sences: {presences_avant} ‚Üí {presences_apres} (supprim√©es: {presences_orphelines[0] if presences_orphelines else 0})")
    print(f"   üí∞ Paies: {paies_avant} ‚Üí {paies_apres} (supprim√©es: {paies_orphelines[0] if paies_orphelines else 0})")
    print(f"   ‚è∞ Heures supp: {heures_avant} ‚Üí {heures_apres} (supprim√©es: {heures_orphelines[0] if heures_orphelines else 0})")
    
    return {
        'presences_supprimees': presences_orphelines[0] if presences_orphelines else 0,
        'paies_supprimees': paies_orphelines[0] if paies_orphelines else 0,
        'heures_supprimees': heures_orphelines[0] if heures_orphelines else 0,
        'success': True
    }


def calculer_mois_suivant(mois, annee):
    """
    Calcule le mois et l'ann√©e suivants.
    """
    if mois == 12:
        return 1, annee + 1
    else:
        return mois + 1, annee


def calculer_mois_precedent(mois, annee):
    """
    Calcule le mois et l'ann√©e pr√©c√©dents.
    """
    if mois == 1:
        return 12, annee - 1
    else:
        return mois - 1, annee


def obtenir_info_mois(mois, annee):
    """
    Obtient les informations d√©taill√©es sur un mois donn√©.
    """
    nb_jours = calendar.monthrange(annee, mois)[1]
    nom_mois = calendar.month_name[mois]
    
    return {
        'mois': mois,
        'annee': annee,
        'nb_jours': nb_jours,
        'nom_mois': nom_mois,
        'nom_complet': f"{nom_mois} {annee}",
        'premier_jour': datetime(annee, mois, 1).date(),
        'dernier_jour': datetime(annee, mois, nb_jours).date()
    }
