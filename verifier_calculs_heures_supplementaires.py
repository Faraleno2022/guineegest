#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de v√©rification des calculs des heures suppl√©mentaires
V√©rifie que :
1. Total Hours = Fin - D√©but (par ligne)
2. Total mensuel = somme des Total Hours individuels pour chaque travailleur
3. Montant supp. = total mensuel * D√©finir Montant
"""

import os
import sys
import django
from datetime import datetime, timedelta, time
from decimal import Decimal, ROUND_HALF_UP

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fleet_management.settings')
django.setup()

from fleet_app.models_entreprise import HeureSupplementaire, Employe
from django.contrib.auth.models import User

def calculer_duree_heures(heure_debut, heure_fin):
    """
    Calcule la dur√©e entre deux heures (g√®re le passage de minuit)
    """
    if not heure_debut or not heure_fin:
        return Decimal('0.00')
    
    # Convertir en datetime pour faciliter les calculs
    debut = datetime.combine(datetime.today(), heure_debut)
    fin = datetime.combine(datetime.today(), heure_fin)
    
    # Si l'heure de fin est inf√©rieure √† l'heure de d√©but, on assume que c'est le lendemain
    if fin < debut:
        fin += timedelta(days=1)
    
    # Calculer la diff√©rence en heures
    duree_timedelta = fin - debut
    duree_heures = duree_timedelta.total_seconds() / 3600
    
    return Decimal(str(duree_heures)).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)

def verifier_calculs_heures_supplementaires():
    """
    V√©rifie tous les calculs des heures suppl√©mentaires
    """
    print("üîç V√âRIFICATION DES CALCULS DES HEURES SUPPL√âMENTAIRES")
    print("=" * 80)
    
    # R√©cup√©rer toutes les heures suppl√©mentaires
    heures_sup = HeureSupplementaire.objects.all().select_related('employe').order_by('employe', 'date')
    
    if not heures_sup.exists():
        print("‚ùå Aucune heure suppl√©mentaire trouv√©e dans la base de donn√©es")
        return
    
    print(f"üìä Total des heures suppl√©mentaires √† v√©rifier : {heures_sup.count()}")
    print()
    
    # Dictionnaire pour stocker les totaux par employ√© et par mois
    totaux_employes = {}
    erreurs_calcul = []
    
    # 1. V√©rification ligne par ligne : Total Hours = Fin - D√©but
    print("1Ô∏è‚É£ V√âRIFICATION : Total Hours = Fin - D√©but")
    print("-" * 50)
    
    for heure in heures_sup:
        # Calculer la dur√©e attendue
        duree_calculee = calculer_duree_heures(heure.heure_debut, heure.heure_fin)
        duree_stockee = heure.duree
        
        # Cl√© pour grouper par employ√© et mois
        cle_employe_mois = f"{heure.employe.id}_{heure.date.year}_{heure.date.month}"
        
        if cle_employe_mois not in totaux_employes:
            totaux_employes[cle_employe_mois] = {
                'employe': heure.employe,
                'mois': heure.date.month,
                'annee': heure.date.year,
                'heures_individuelles': [],
                'total_heures': Decimal('0.00'),
                'montant_defini': heure.total_a_payer or Decimal('0.00')
            }
        
        # Ajouter les heures individuelles
        totaux_employes[cle_employe_mois]['heures_individuelles'].append({
            'date': heure.date,
            'debut': heure.heure_debut,
            'fin': heure.heure_fin,
            'duree_calculee': duree_calculee,
            'duree_stockee': duree_stockee,
            'montant_defini': heure.total_a_payer or Decimal('0.00')
        })
        
        # V√©rifier si le calcul est correct (tol√©rance de 0.01h)
        difference = abs(duree_calculee - duree_stockee)
        if difference > Decimal('0.01'):
            erreurs_calcul.append({
                'type': 'duree',
                'employe': heure.employe,
                'date': heure.date,
                'debut': heure.heure_debut,
                'fin': heure.heure_fin,
                'duree_calculee': duree_calculee,
                'duree_stockee': duree_stockee,
                'difference': difference
            })
            print(f"‚ùå {heure.employe.matricule} - {heure.date} : {heure.heure_debut}-{heure.heure_fin}")
            print(f"   Calcul√©: {duree_calculee}h, Stock√©: {duree_stockee}h, Diff√©rence: {difference}h")
        else:
            print(f"‚úÖ {heure.employe.matricule} - {heure.date} : {heure.heure_debut}-{heure.heure_fin} = {duree_calculee}h")
    
    print()
    
    # 2. Calcul des totaux mensuels par employ√©
    print("2Ô∏è‚É£ V√âRIFICATION : Total mensuel = somme des Total Hours individuels")
    print("-" * 60)
    
    for cle, data in totaux_employes.items():
        # Calculer le total des heures pour cet employ√© ce mois-ci
        total_heures_calcule = sum(h['duree_calculee'] for h in data['heures_individuelles'])
        data['total_heures'] = total_heures_calcule
        
        employe = data['employe']
        mois = data['mois']
        annee = data['annee']
        
        print(f"üë§ {employe.matricule} - {employe.prenom} {employe.nom}")
        print(f"   üìÖ P√©riode : {mois:02d}/{annee}")
        print(f"   üìä Nombre d'entr√©es : {len(data['heures_individuelles'])}")
        
        # D√©tail des heures individuelles
        for h in data['heures_individuelles']:
            print(f"   ‚Ä¢ {h['date']} : {h['debut']}-{h['fin']} = {h['duree_calculee']}h")
        
        print(f"   üî¢ Total mensuel : {total_heures_calcule}h")
        print()
    
    # 3. V√©rification : Montant supp. = total mensuel * D√©finir Montant
    print("3Ô∏è‚É£ V√âRIFICATION : Montant supp. = Total Hours √ó D√©finir Montant")
    print("-" * 65)
    
    for cle, data in totaux_employes.items():
        employe = data['employe']
        total_heures = data['total_heures']
        
        # R√©cup√©rer le montant d√©fini (utiliser le dernier montant d√©fini pour cet employ√©)
        heures_employe = [h for h in heures_sup if h.employe == employe]
        montant_defini = Decimal('0.00')
        
        if heures_employe:
            # Prendre le montant le plus r√©cent non nul
            for h in sorted(heures_employe, key=lambda x: x.date, reverse=True):
                if h.total_a_payer and h.total_a_payer > 0:
                    montant_defini = h.total_a_payer
                    break
        
        print(f"üë§ {employe.matricule} - {employe.prenom} {employe.nom}")
        print(f"   üìä Total heures mensuelles : {total_heures}h")
        print(f"   üí∞ Montant d√©fini : {montant_defini} GNF")
        
        if montant_defini > 0:
            montant_supp_calcule = total_heures * montant_defini
            print(f"   üßÆ Calcul : {total_heures}h √ó {montant_defini} = {montant_supp_calcule} GNF")
            
            # V√©rifier avec la m√©thode du mod√®le
            for h in heures_employe:
                if h.total_a_payer and h.total_a_payer > 0:
                    montant_modele = h.calculer_montant_supplementaire_simple()
                    duree_utilisee = getattr(h, 'duree_calculee', None) or h.duree
                    montant_attendu = float(duree_utilisee) * float(h.total_a_payer)
                    
                    print(f"   üîç Ligne {h.date} : {duree_utilisee}h √ó {h.total_a_payer} = {montant_modele} GNF")
                    
                    if abs(montant_modele - montant_attendu) > 0.01:
                        erreurs_calcul.append({
                            'type': 'montant',
                            'employe': employe,
                            'date': h.date,
                            'montant_calcule': montant_modele,
                            'montant_attendu': montant_attendu,
                            'difference': abs(montant_modele - montant_attendu)
                        })
                        print(f"   ‚ùå Erreur de calcul d√©tect√©e !")
                    break
        else:
            print(f"   ‚ö†Ô∏è  Aucun montant d√©fini")
        
        print()
    
    # 4. R√©sum√© des erreurs
    print("4Ô∏è‚É£ R√âSUM√â DES V√âRIFICATIONS")
    print("-" * 40)
    
    if erreurs_calcul:
        print(f"‚ùå {len(erreurs_calcul)} erreur(s) d√©tect√©e(s) :")
        
        erreurs_duree = [e for e in erreurs_calcul if e['type'] == 'duree']
        erreurs_montant = [e for e in erreurs_calcul if e['type'] == 'montant']
        
        if erreurs_duree:
            print(f"   ‚Ä¢ {len(erreurs_duree)} erreur(s) de calcul de dur√©e")
        
        if erreurs_montant:
            print(f"   ‚Ä¢ {len(erreurs_montant)} erreur(s) de calcul de montant")
    else:
        print("‚úÖ Tous les calculs sont corrects !")
    
    print()
    print("üìà STATISTIQUES GLOBALES")
    print("-" * 30)
    print(f"‚Ä¢ Nombre total d'employ√©s : {len(set(h.employe for h in heures_sup))}")
    print(f"‚Ä¢ Nombre total d'heures sup : {heures_sup.count()}")
    print(f"‚Ä¢ Nombre de mois diff√©rents : {len(totaux_employes)}")
    
    # Total g√©n√©ral des heures
    total_heures_global = sum(data['total_heures'] for data in totaux_employes.values())
    print(f"‚Ä¢ Total heures suppl√©mentaires : {total_heures_global}h")
    
    return len(erreurs_calcul) == 0

if __name__ == "__main__":
    print("üöÄ D√©marrage de la v√©rification des calculs des heures suppl√©mentaires")
    print("=" * 80)
    
    try:
        succes = verifier_calculs_heures_supplementaires()
        
        if succes:
            print("\nüéâ V√âRIFICATION TERMIN√âE AVEC SUCC√àS !")
            print("Tous les calculs des heures suppl√©mentaires sont corrects.")
        else:
            print("\n‚ö†Ô∏è  V√âRIFICATION TERMIN√âE AVEC DES ERREURS !")
            print("Certains calculs n√©cessitent une correction.")
            
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE LA V√âRIFICATION : {e}")
        import traceback
        traceback.print_exc()
