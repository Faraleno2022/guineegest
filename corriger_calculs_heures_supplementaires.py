#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de correction des calculs des heures suppl√©mentaires
Corrige automatiquement :
1. Total Hours = Fin - D√©but (gestion du passage de minuit)
2. Met √† jour la base de donn√©es avec les bonnes dur√©es
3. V√©rifie que les montants se recalculent correctement
"""

import os
import sys
import django
from datetime import datetime, timedelta, time
from decimal import Decimal, ROUND_HALF_UP

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fleet_management.settings')
django.setup()

from fleet_app.models_entreprise import HeureSupplementaire, Employe
from django.contrib.auth.models import User
from django.db import transaction

def calculer_duree_heures_correcte(heure_debut, heure_fin):
    """
    Calcule la dur√©e entre deux heures avec gestion correcte du passage de minuit
    """
    if not heure_debut or not heure_fin:
        return Decimal('0.00')
    
    # Convertir en datetime pour faciliter les calculs
    debut = datetime.combine(datetime.today(), heure_debut)
    fin = datetime.combine(datetime.today(), heure_fin)
    
    # Si l'heure de fin est inf√©rieure √† l'heure de d√©but, on assume que c'est le lendemain
    if fin < debut:
        fin += timedelta(days=1)
    
    # Calculer la diff√©rence en heures
    duree_timedelta = fin - debut
    duree_heures = duree_timedelta.total_seconds() / 3600
    
    return Decimal(str(duree_heures)).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)

def corriger_calculs_heures_supplementaires():
    """
    Corrige tous les calculs des heures suppl√©mentaires
    """
    print("üîß CORRECTION DES CALCULS DES HEURES SUPPL√âMENTAIRES")
    print("=" * 80)
    
    # R√©cup√©rer toutes les heures suppl√©mentaires
    heures_sup = HeureSupplementaire.objects.all().select_related('employe').order_by('employe', 'date')
    
    if not heures_sup.exists():
        print("‚ùå Aucune heure suppl√©mentaire trouv√©e dans la base de donn√©es")
        return False
    
    print(f"üìä Total des heures suppl√©mentaires √† corriger : {heures_sup.count()}")
    print()
    
    corrections_effectuees = 0
    erreurs_corrigees = []
    
    with transaction.atomic():
        print("1Ô∏è‚É£ CORRECTION DES DUR√âES (Total Hours = Fin - D√©but)")
        print("-" * 60)
        
        for heure in heures_sup:
            # Calculer la dur√©e correcte
            duree_correcte = calculer_duree_heures_correcte(heure.heure_debut, heure.heure_fin)
            duree_actuelle = heure.duree
            
            # V√©rifier si une correction est n√©cessaire (tol√©rance de 0.01h)
            difference = abs(duree_correcte - duree_actuelle)
            
            if difference > Decimal('0.01'):
                print(f"üîß Correction pour {heure.employe.matricule} - {heure.date}")
                print(f"   Heures : {heure.heure_debut} √† {heure.heure_fin}")
                print(f"   Avant : {duree_actuelle}h")
                print(f"   Apr√®s : {duree_correcte}h")
                print(f"   Gain : +{duree_correcte - duree_actuelle}h")
                
                # Sauvegarder l'ancienne valeur pour le rapport
                erreurs_corrigees.append({
                    'employe': heure.employe,
                    'date': heure.date,
                    'debut': heure.heure_debut,
                    'fin': heure.heure_fin,
                    'duree_avant': duree_actuelle,
                    'duree_apres': duree_correcte,
                    'gain': duree_correcte - duree_actuelle,
                    'montant_defini': heure.total_a_payer or Decimal('0.00')
                })
                
                # Appliquer la correction
                heure.duree = duree_correcte
                heure.save()
                corrections_effectuees += 1
                
                print(f"   ‚úÖ Correction appliqu√©e")
            else:
                print(f"‚úÖ {heure.employe.matricule} - {heure.date} : Dur√©e correcte ({duree_correcte}h)")
            
            print()
    
    print("2Ô∏è‚É£ V√âRIFICATION POST-CORRECTION")
    print("-" * 40)
    
    # Recalculer les totaux par employ√© apr√®s correction
    totaux_employes = {}
    
    # Recharger les donn√©es apr√®s correction
    heures_sup_corrigees = HeureSupplementaire.objects.all().select_related('employe').order_by('employe', 'date')
    
    for heure in heures_sup_corrigees:
        cle_employe_mois = f"{heure.employe.id}_{heure.date.year}_{heure.date.month}"
        
        if cle_employe_mois not in totaux_employes:
            totaux_employes[cle_employe_mois] = {
                'employe': heure.employe,
                'mois': heure.date.month,
                'annee': heure.date.year,
                'total_heures': Decimal('0.00'),
                'montant_defini': heure.total_a_payer or Decimal('0.00'),
                'nombre_entrees': 0
            }
        
        totaux_employes[cle_employe_mois]['total_heures'] += heure.duree
        totaux_employes[cle_employe_mois]['nombre_entrees'] += 1
        
        # Utiliser le montant le plus r√©cent
        if heure.total_a_payer and heure.total_a_payer > 0:
            totaux_employes[cle_employe_mois]['montant_defini'] = heure.total_a_payer
    
    print("üìä TOTAUX MENSUELS APR√àS CORRECTION :")
    print("-" * 45)
    
    for cle, data in totaux_employes.items():
        employe = data['employe']
        total_heures = data['total_heures']
        montant_defini = data['montant_defini']
        nombre_entrees = data['nombre_entrees']
        
        print(f"üë§ {employe.matricule} - {employe.prenom} {employe.nom}")
        print(f"   üìÖ P√©riode : {data['mois']:02d}/{data['annee']}")
        print(f"   üìä Entr√©es : {nombre_entrees}")
        print(f"   ‚è±Ô∏è  Total heures : {total_heures}h")
        print(f"   üí∞ Montant d√©fini : {montant_defini} GNF")
        
        if montant_defini > 0:
            montant_total = total_heures * montant_defini
            print(f"   üßÆ Montant total : {total_heures}h √ó {montant_defini} = {montant_total} GNF")
        else:
            print(f"   ‚ö†Ô∏è  Aucun montant d√©fini")
        
        print()
    
    print("3Ô∏è‚É£ R√âSUM√â DES CORRECTIONS")
    print("-" * 35)
    
    if corrections_effectuees > 0:
        print(f"‚úÖ {corrections_effectuees} correction(s) appliqu√©e(s)")
        print()
        
        print("üìã D√âTAIL DES CORRECTIONS :")
        for correction in erreurs_corrigees:
            employe = correction['employe']
            print(f"‚Ä¢ {employe.matricule} - {correction['date']}")
            print(f"  Heures : {correction['debut']} √† {correction['fin']}")
            print(f"  Dur√©e : {correction['duree_avant']}h ‚Üí {correction['duree_apres']}h")
            print(f"  Gain : +{correction['gain']}h")
            
            if correction['montant_defini'] > 0:
                gain_montant = correction['gain'] * correction['montant_defini']
                print(f"  Gain financier : +{gain_montant} GNF")
            
            print()
        
        # Calculer le gain total
        gain_total_heures = sum(c['gain'] for c in erreurs_corrigees)
        print(f"üéØ GAIN TOTAL : +{gain_total_heures}h")
        
        # Calculer le gain financier total
        gain_financier_total = sum(
            c['gain'] * c['montant_defini'] 
            for c in erreurs_corrigees 
            if c['montant_defini'] > 0
        )
        if gain_financier_total > 0:
            print(f"üí∞ GAIN FINANCIER TOTAL : +{gain_financier_total} GNF")
    else:
        print("‚úÖ Aucune correction n√©cessaire - Tous les calculs √©taient d√©j√† corrects")
    
    return corrections_effectuees > 0

def verifier_coherence_post_correction():
    """
    V√©rifie la coh√©rence des calculs apr√®s correction
    """
    print("\n4Ô∏è‚É£ V√âRIFICATION DE COH√âRENCE POST-CORRECTION")
    print("-" * 55)
    
    heures_sup = HeureSupplementaire.objects.all().select_related('employe')
    problemes_detectes = 0
    
    for heure in heures_sup:
        duree_calculee = calculer_duree_heures_correcte(heure.heure_debut, heure.heure_fin)
        duree_stockee = heure.duree
        
        difference = abs(duree_calculee - duree_stockee)
        if difference > Decimal('0.01'):
            print(f"‚ùå Incoh√©rence d√©tect√©e pour {heure.employe.matricule} - {heure.date}")
            print(f"   Calcul√©: {duree_calculee}h, Stock√©: {duree_stockee}h")
            problemes_detectes += 1
    
    if problemes_detectes == 0:
        print("‚úÖ Toutes les dur√©es sont coh√©rentes apr√®s correction")
        return True
    else:
        print(f"‚ùå {problemes_detectes} probl√®me(s) de coh√©rence d√©tect√©(s)")
        return False

if __name__ == "__main__":
    print("üöÄ D√©marrage de la correction des calculs des heures suppl√©mentaires")
    print("=" * 80)
    
    try:
        # Effectuer les corrections
        corrections_appliquees = corriger_calculs_heures_supplementaires()
        
        # V√©rifier la coh√©rence apr√®s correction
        coherence_ok = verifier_coherence_post_correction()
        
        print("\n" + "=" * 80)
        if corrections_appliquees and coherence_ok:
            print("üéâ CORRECTION TERMIN√âE AVEC SUCC√àS !")
            print("Les calculs des heures suppl√©mentaires ont √©t√© corrig√©s.")
            print("Tous les montants sont maintenant bas√©s sur les dur√©es correctes.")
        elif not corrections_appliquees:
            print("‚úÖ AUCUNE CORRECTION N√âCESSAIRE")
            print("Tous les calculs √©taient d√©j√† corrects.")
        else:
            print("‚ö†Ô∏è  CORRECTION PARTIELLE")
            print("Certains probl√®mes persistent apr√®s correction.")
            
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE LA CORRECTION : {e}")
        import traceback
        traceback.print_exc()
