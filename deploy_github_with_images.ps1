# Script de d√©ploiement GitHub avec images - Version 2.1.0
# Date: 04 Octobre 2025

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "  D√âPLOIEMENT GITHUB AVEC IMAGES" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# 1. V√©rifier le statut Git
Write-Host "üìä V√©rification du statut Git..." -ForegroundColor Yellow
git status --short
Write-Host ""

# 2. V√©rifier les images
Write-Host "üñºÔ∏è  V√©rification des images..." -ForegroundColor Yellow
$images = Get-ChildItem -Path "media\images" -Recurse -Include *.jpg,*.jpeg,*.png,*.gif,*.webp,*.svg -ErrorAction SilentlyContinue
if ($images) {
    Write-Host "‚úÖ Images trouv√©es:" -ForegroundColor Green
    foreach ($img in $images) {
        Write-Host "   - $($img.FullName.Replace((Get-Location).Path + '\', ''))" -ForegroundColor White
    }
} else {
    Write-Host "‚ö†Ô∏è  Aucune image trouv√©e dans media/images/" -ForegroundColor Yellow
}
Write-Host ""

# 3. Forcer l'ajout des images (m√™me si dans .gitignore)
Write-Host "‚ûï Ajout forc√© des images..." -ForegroundColor Yellow
git add -f media/images/**/*.jpg
git add -f media/images/**/*.jpeg
git add -f media/images/**/*.png
git add -f media/images/**/*.gif
git add -f media/images/**/*.webp
git add -f media/images/**/*.svg
Write-Host "‚úÖ Images ajout√©es" -ForegroundColor Green
Write-Host ""

# 4. Ajouter tous les autres fichiers
Write-Host "‚ûï Ajout des fichiers modifi√©s..." -ForegroundColor Yellow
git add fleet_app/
git add fleet_management/
git add *.md
git add *.txt
git add *.ps1
Write-Host "‚úÖ Fichiers ajout√©s" -ForegroundColor Green
Write-Host ""

# 5. Afficher les fichiers √† commiter
Write-Host "üìù Fichiers √† commiter:" -ForegroundColor Yellow
git status --short
Write-Host ""

# 6. Demander confirmation
$confirmation = Read-Host "Voulez-vous continuer avec le commit? (O/N)"
if ($confirmation -ne 'O' -and $confirmation -ne 'o') {
    Write-Host "‚ùå Op√©ration annul√©e" -ForegroundColor Red
    exit
}

# 7. Cr√©er le commit
Write-Host ""
Write-Host "üíæ Cr√©ation du commit..." -ForegroundColor Yellow
$commitMessage = @"
Feature: Version 2.1.0 - 4 fonctionnalit√©s + 6 corrections + Images

FONCTIONNALIT√âS AJOUT√âES:

1. CORRECTIONS PDF FACTURES:
   ‚úÖ Fix format date/heure (s√©paration filtres date et time)
   ‚úÖ Import BytesIO ajout√© dans views_location.py
   ‚úÖ Import pisa dans factures_batch_pdf()
   ‚úÖ Tests valid√©s: PDF individuel (5KB) + PDF lot (8KB)

2. PAGE D'ACCUEIL PUBLIQUE (/accueil/):
   ‚úÖ Accessible sans authentification
   ‚úÖ Affiche √©tat journalier des v√©hicules en location
   ‚úÖ Statistiques en temps r√©el
   ‚úÖ Design moderne responsive avec Bootstrap 5
   ‚úÖ Auto-refresh toutes les 5 minutes
   ‚úÖ Badges color√©s par statut
   ‚úÖ Arri√®re-plan blanc avec en-t√™te d√©grad√©
   ‚úÖ Bouton retour √† la page d'accueil

3. BLOC V√âHICULES EN LOCATION (Dashboard):
   ‚úÖ Ajout√© dans dashboard principal apr√®s section KPI
   ‚úÖ Statistiques rapides (4 cartes)
   ‚úÖ Tableau d√©taill√© des 10 premiers v√©hicules
   ‚úÖ Lien vers page publique

4. BLOC V√âHICULES EN LOCATION (Page d'accueil):
   ‚úÖ Ajout√© sur home.html apr√®s "Nos services principaux"
   ‚úÖ Aper√ßu de 6 v√©hicules avec badges
   ‚úÖ Affichage conditionnel selon authentification

CORRECTIONS DE BUGS:
1. TypeError - Format date avec heure (PDF)
2. NameError - BytesIO non import√©
3. NameError - pisa non import√©
4. AttributeError - Context processor
5. UnboundLocalError - Variable timezone
6. NoReverseMatch - URL feuille_pontage_list

IMAGES AJOUT√âES:
‚úÖ media/images/Acces.jpg
‚úÖ media/images/Acces_optimized.jpg
‚úÖ media/images/Acces_optimized.webp
‚úÖ media/images/team/fara.png
‚úÖ media/images/team/ifono.jpg

FICHIERS MODIFI√âS:
- Backend: views.py, views_location.py, urls.py, context_processors.py
- Frontend: dashboard.html, home.html, accueil_public.html, templates PDF
- Documentation: 18 fichiers MD

TESTS: 100% r√©ussis
URLs: /, /dashboard/, /accueil/ (nouveau)
Version: 2.1.0
"@

git commit -m $commitMessage
Write-Host "‚úÖ Commit cr√©√©" -ForegroundColor Green
Write-Host ""

# 8. Afficher le dernier commit
Write-Host "üìã Dernier commit:" -ForegroundColor Yellow
git log -1 --oneline
Write-Host ""

# 9. V√©rifier les images dans le commit
Write-Host "üñºÔ∏è  Images dans le commit:" -ForegroundColor Yellow
git diff-tree --no-commit-id --name-only -r HEAD | Select-String "media/images"
Write-Host ""

# 10. Demander confirmation pour push
$pushConfirmation = Read-Host "Voulez-vous pusher vers GitHub? (O/N)"
if ($pushConfirmation -ne 'O' -and $pushConfirmation -ne 'o') {
    Write-Host "‚ö†Ô∏è  Commit local cr√©√© mais pas push√©" -ForegroundColor Yellow
    Write-Host "Pour pusher plus tard: git push origin main" -ForegroundColor Cyan
    exit
}

# 11. Push vers GitHub
Write-Host ""
Write-Host "üöÄ Push vers GitHub..." -ForegroundColor Yellow
git push origin main

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Push r√©ussi!" -ForegroundColor Green
    Write-Host ""
    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host "  D√âPLOIEMENT GITHUB R√âUSSI!" -ForegroundColor Green
    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "üìä R√âSUM√â:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "‚úÖ Code source push√©" -ForegroundColor Green
    Write-Host "‚úÖ Images incluses dans le commit" -ForegroundColor Green
    Write-Host "‚úÖ Documentation compl√®te" -ForegroundColor Green
    Write-Host ""
    
    Write-Host "üñºÔ∏è  IMAGES DISPONIBLES EN LIGNE:" -ForegroundColor Yellow
    Write-Host "   - Hero image: media/images/Acces_optimized.jpg" -ForegroundColor White
    Write-Host "   - WebP version: media/images/Acces_optimized.webp" -ForegroundColor White
    Write-Host "   - √âquipe Fara: media/images/team/fara.png" -ForegroundColor White
    Write-Host "   - √âquipe Ifono: media/images/team/ifono.jpg" -ForegroundColor White
    Write-Host ""
    
    Write-Host "üìå PROCHAINES √âTAPES:" -ForegroundColor Yellow
    Write-Host "  1. D√©ployer sur PythonAnywhere:" -ForegroundColor White
    Write-Host "     cd ~/guineegest" -ForegroundColor Gray
    Write-Host "     git pull origin main" -ForegroundColor Gray
    Write-Host "     # Reload web app" -ForegroundColor Gray
    Write-Host ""
    Write-Host "  2. V√©rifier les images en ligne:" -ForegroundColor White
    Write-Host "     https://github.com/votre-repo/tree/main/media/images" -ForegroundColor Gray
    Write-Host ""
    Write-Host "  3. Tester l'affichage:" -ForegroundColor White
    Write-Host "     - Page d'accueil: /" -ForegroundColor Gray
    Write-Host "     - Page publique: /accueil/" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "üéâ SUCC√àS COMPLET!" -ForegroundColor Green
    Write-Host "   - Version 2.1.0 d√©ploy√©e" -ForegroundColor White
    Write-Host "   - Images disponibles en ligne" -ForegroundColor White
    Write-Host "   - Documentation √† jour" -ForegroundColor White
    Write-Host ""
    
} else {
    Write-Host "‚ùå Erreur lors du push" -ForegroundColor Red
    Write-Host "V√©rifiez votre connexion et r√©essayez" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üí° Commandes utiles:" -ForegroundColor Yellow
    Write-Host "   git status" -ForegroundColor Gray
    Write-Host "   git log -1" -ForegroundColor Gray
    Write-Host "   git push origin main --force (si n√©cessaire)" -ForegroundColor Gray
}
