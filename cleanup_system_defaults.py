#!/usr/bin/env python3
"""
Script de nettoyage pour supprimer d√©finitivement les anciennes valeurs syst√®me
R√©initialise tous les montants par d√©faut (50000, 100000, etc.) √† z√©ro pour tous les utilisateurs
"""

import os
import sys
import django
from decimal import Decimal

# Configuration Django
sys.path.append(r'c:\Users\faral\Desktop\Gestion_parck')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fleet_management.settings')
django.setup()

from django.contrib.auth.models import User
from fleet_app.models_entreprise import ConfigurationMontantStatut

# Anciennes valeurs syst√®me √† supprimer
SYSTEM_DEFAULT_VALUES = [
    Decimal('50000'),   # montant_am, montant_pm
    Decimal('100000'),  # montant_journee, montant_maladie_payee, montant_conge, montant_formation
    Decimal('75000'),   # montant_dim_am, montant_dim_pm
    Decimal('150000'),  # montant_dim_journee
]

def cleanup_system_defaults():
    """Nettoie toutes les valeurs syst√®me par d√©faut pour tous les utilisateurs"""
    print("üßπ NETTOYAGE DES VALEURS SYST√àME PAR D√âFAUT")
    print("=" * 60)
    
    try:
        # R√©cup√©rer toutes les configurations existantes
        all_configs = ConfigurationMontantStatut.objects.all()
        total_configs = all_configs.count()
        
        print(f"üìä {total_configs} configuration(s) trouv√©e(s) dans la base de donn√©es")
        
        if total_configs == 0:
            print("‚ÑπÔ∏è Aucune configuration trouv√©e. Rien √† nettoyer.")
            return True
        
        cleaned_configs = 0
        total_fields_cleaned = 0
        
        for config in all_configs:
            print(f"\nüë§ Nettoyage pour l'utilisateur: {config.user.username}")
            
            fields_cleaned = []
            
            # V√©rifier et nettoyer chaque champ
            field_checks = [
                ('montant_am', config.montant_am),
                ('montant_pm', config.montant_pm),
                ('montant_journee', config.montant_journee),
                ('montant_dim_am', config.montant_dim_am),
                ('montant_dim_pm', config.montant_dim_pm),
                ('montant_dim_journee', config.montant_dim_journee),
                ('montant_absent', config.montant_absent),
                ('montant_maladie', config.montant_maladie),
                ('montant_maladie_payee', config.montant_maladie_payee),
                ('montant_conge', config.montant_conge),
                ('montant_formation', config.montant_formation),
                ('montant_repos', config.montant_repos),
            ]
            
            for field_name, current_value in field_checks:
                # Si la valeur actuelle est une ancienne valeur syst√®me, la r√©initialiser √† 0
                if current_value in SYSTEM_DEFAULT_VALUES:
                    setattr(config, field_name, Decimal('0'))
                    fields_cleaned.append(f"{field_name}: {current_value} ‚Üí 0")
                    print(f"   üßπ {field_name}: {current_value} ‚Üí 0")
            
            # Sauvegarder si des champs ont √©t√© nettoy√©s
            if fields_cleaned:
                config.save()
                cleaned_configs += 1
                total_fields_cleaned += len(fields_cleaned)
                print(f"   ‚úÖ {len(fields_cleaned)} champ(s) nettoy√©(s) et sauvegard√©(s)")
            else:
                print("   ‚ÑπÔ∏è Aucune valeur syst√®me trouv√©e, rien √† nettoyer")
        
        print(f"\nüìã R√âSUM√â DU NETTOYAGE:")
        print(f"   Configurations trait√©es: {total_configs}")
        print(f"   Configurations modifi√©es: {cleaned_configs}")
        print(f"   Total de champs nettoy√©s: {total_fields_cleaned}")
        
        if cleaned_configs > 0:
            print(f"\nüéâ NETTOYAGE TERMIN√â AVEC SUCC√àS!")
            print(f"‚úÖ {total_fields_cleaned} valeur(s) syst√®me supprim√©e(s)")
            print("‚úÖ Tous les montants sont maintenant √† 0 par d√©faut")
        else:
            print(f"\n‚ÑπÔ∏è AUCUN NETTOYAGE N√âCESSAIRE")
            print("‚úÖ Aucune valeur syst√®me trouv√©e dans la base")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR lors du nettoyage: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def verify_cleanup():
    """V√©rifie que le nettoyage a √©t√© effectu√© correctement"""
    print("\nüîç V√âRIFICATION DU NETTOYAGE")
    print("=" * 40)
    
    try:
        all_configs = ConfigurationMontantStatut.objects.all()
        
        system_values_found = []
        
        for config in all_configs:
            field_checks = [
                ('montant_am', config.montant_am),
                ('montant_pm', config.montant_pm),
                ('montant_journee', config.montant_journee),
                ('montant_dim_am', config.montant_dim_am),
                ('montant_dim_pm', config.montant_dim_pm),
                ('montant_dim_journee', config.montant_dim_journee),
                ('montant_absent', config.montant_absent),
                ('montant_maladie', config.montant_maladie),
                ('montant_maladie_payee', config.montant_maladie_payee),
                ('montant_conge', config.montant_conge),
                ('montant_formation', config.montant_formation),
                ('montant_repos', config.montant_repos),
            ]
            
            for field_name, current_value in field_checks:
                if current_value in SYSTEM_DEFAULT_VALUES:
                    system_values_found.append(f"{config.user.username}.{field_name}: {current_value}")
        
        if system_values_found:
            print("‚ùå VALEURS SYST√àME ENCORE PR√âSENTES:")
            for value in system_values_found:
                print(f"   {value}")
            return False
        else:
            print("‚úÖ AUCUNE VALEUR SYST√àME TROUV√âE")
            print("‚úÖ Le nettoyage a √©t√© effectu√© avec succ√®s")
            return True
            
    except Exception as e:
        print(f"‚ùå ERREUR lors de la v√©rification: {str(e)}")
        return False

def show_current_values():
    """Affiche les valeurs actuelles pour tous les utilisateurs"""
    print("\nüìä VALEURS ACTUELLES DANS LA BASE")
    print("=" * 50)
    
    try:
        all_configs = ConfigurationMontantStatut.objects.all()
        
        for config in all_configs:
            print(f"\nüë§ {config.user.username}:")
            print(f"   montant_am: {config.montant_am}")
            print(f"   montant_pm: {config.montant_pm}")
            print(f"   montant_journee: {config.montant_journee}")
            print(f"   montant_dim_am: {config.montant_dim_am}")
            print(f"   montant_dim_pm: {config.montant_dim_pm}")
            print(f"   montant_dim_journee: {config.montant_dim_journee}")
            print(f"   montant_absent: {config.montant_absent}")
            print(f"   montant_maladie: {config.montant_maladie}")
            print(f"   montant_maladie_payee: {config.montant_maladie_payee}")
            print(f"   montant_conge: {config.montant_conge}")
            print(f"   montant_formation: {config.montant_formation}")
            print(f"   montant_repos: {config.montant_repos}")
            
    except Exception as e:
        print(f"‚ùå ERREUR lors de l'affichage: {str(e)}")

if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DU NETTOYAGE DES VALEURS SYST√àME")
    print("=" * 70)
    
    # Afficher les valeurs actuelles
    show_current_values()
    
    # Effectuer le nettoyage
    cleanup_success = cleanup_system_defaults()
    
    # V√©rifier le nettoyage
    if cleanup_success:
        verify_success = verify_cleanup()
        
        if verify_success:
            print("\nüéâ MISSION ACCOMPLIE!")
            print("‚úÖ Toutes les valeurs syst√®me ont √©t√© supprim√©es")
            print("‚úÖ Seuls les montants d√©finis par l'utilisateur seront utilis√©s")
        else:
            print("\n‚ö†Ô∏è NETTOYAGE INCOMPLET")
            print("‚ùå Certaines valeurs syst√®me persistent")
    else:
        print("\n‚ùå √âCHEC DU NETTOYAGE")
        print("‚ùå Le nettoyage n'a pas pu √™tre effectu√©")
