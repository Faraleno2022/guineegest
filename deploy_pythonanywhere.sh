#!/bin/bash
# Script de d√©ploiement automatique pour PythonAnywhere
# Date: 08 Octobre 2025

set -e  # Arr√™ter en cas d'erreur

echo "========================================="
echo "  D√âPLOIEMENT GUINEEGEST - PYTHONANYWHERE"
echo "========================================="
echo ""

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables
PROJECT_DIR=~/guineegest
VENV_DIR=$PROJECT_DIR/.venv
WSGI_FILE=/var/www/gestionnairedeparc_pythonanywhere_com_wsgi.py

echo "üìÅ R√©pertoire du projet: $PROJECT_DIR"
echo "üêç Environnement virtuel: $VENV_DIR"
echo ""

# √âtape 1: Aller dans le r√©pertoire du projet
echo "1Ô∏è‚É£  Navigation vers le projet..."
cd $PROJECT_DIR || { echo -e "${RED}‚ùå Erreur: Impossible d'acc√©der au r√©pertoire${NC}"; exit 1; }
echo -e "${GREEN}‚úÖ OK${NC}"
echo ""

# √âtape 2: Activer l'environnement virtuel
echo "2Ô∏è‚É£  Activation de l'environnement virtuel..."
source $VENV_DIR/bin/activate || { echo -e "${RED}‚ùå Erreur: Impossible d'activer le venv${NC}"; exit 1; }
echo -e "${GREEN}‚úÖ OK${NC}"
echo ""

# √âtape 3: Sauvegarder l'√©tat actuel
echo "3Ô∏è‚É£  Sauvegarde de l'√©tat actuel..."
python manage.py showmigrations fleet_app > migrations_avant_$(date +%Y%m%d_%H%M%S).txt
echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e${NC}"
echo ""

# √âtape 4: R√©cup√©rer les derni√®res modifications
echo "4Ô∏è‚É£  R√©cup√©ration des derni√®res modifications depuis GitHub..."
git fetch origin
git status
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Voulez-vous continuer avec git pull? (y/n)${NC}"
read -r response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    git pull origin main || { echo -e "${RED}‚ùå Erreur lors du git pull${NC}"; exit 1; }
    echo -e "${GREEN}‚úÖ Code mis √† jour${NC}"
else
    echo -e "${YELLOW}‚è≠Ô∏è  Git pull ignor√©${NC}"
fi
echo ""

# √âtape 5: Installer/Mettre √† jour les d√©pendances
echo "5Ô∏è‚É£  Installation des d√©pendances..."
pip install -r requirements.txt --quiet
echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
echo ""

# √âtape 6: V√©rifier les migrations
echo "6Ô∏è‚É£  V√©rification des migrations..."
python manage.py showmigrations fleet_app | tail -10
echo ""

# √âtape 7: Appliquer les migrations
echo "7Ô∏è‚É£  Application des migrations..."
echo -e "${YELLOW}‚ö†Ô∏è  Migrations √† appliquer:${NC}"
python manage.py showmigrations fleet_app | grep '\[ \]' || echo "Aucune migration en attente"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Appliquer les migrations? (y/n)${NC}"
read -r response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    python manage.py migrate fleet_app || { echo -e "${RED}‚ùå Erreur lors des migrations${NC}"; exit 1; }
    echo -e "${GREEN}‚úÖ Migrations appliqu√©es${NC}"
else
    echo -e "${YELLOW}‚è≠Ô∏è  Migrations ignor√©es${NC}"
fi
echo ""

# √âtape 8: V√©rifier la structure de la base de donn√©es
echo "8Ô∏è‚É£  V√©rification de la structure de la base de donn√©es..."
python manage.py shell << EOF
from fleet_app.models import Employe, Chauffeur
print("\nüìä Champs Employe:")
for f in Employe._meta.get_fields():
    print(f"  - {f.name}")
    
print("\nüë§ Champs Chauffeur:")
for f in Chauffeur._meta.get_fields():
    print(f"  - {f.name}")

# V√©rifier valeur_km
if hasattr(Employe, 'valeur_km'):
    print("\n‚úÖ valeur_km existe dans Employe")
else:
    print("\n‚ùå valeur_km n'existe PAS dans Employe")
EOF
echo ""

# √âtape 9: Collecter les fichiers statiques
echo "9Ô∏è‚É£  Collecte des fichiers statiques..."
python manage.py collectstatic --noinput || { echo -e "${RED}‚ùå Erreur lors de collectstatic${NC}"; exit 1; }
echo -e "${GREEN}‚úÖ Fichiers statiques collect√©s${NC}"
echo ""

# √âtape 10: V√©rifier le syst√®me
echo "üîü V√©rification du syst√®me..."
python manage.py check --deploy
echo -e "${GREEN}‚úÖ V√©rifications OK${NC}"
echo ""

# √âtape 11: Red√©marrer l'application
echo "1Ô∏è‚É£1Ô∏è‚É£  Red√©marrage de l'application web..."
touch $WSGI_FILE || { echo -e "${RED}‚ùå Erreur lors du red√©marrage${NC}"; exit 1; }
echo -e "${GREEN}‚úÖ Application red√©marr√©e${NC}"
echo ""

# √âtape 12: V√©rifications post-d√©ploiement
echo "1Ô∏è‚É£2Ô∏è‚É£  V√©rifications post-d√©ploiement..."
echo ""
echo "üìã Migrations appliqu√©es:"
python manage.py showmigrations fleet_app | grep '\[X\]' | tail -5
echo ""

# R√©sum√©
echo "========================================="
echo "  ‚úÖ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS"
echo "========================================="
echo ""
echo "üîç Prochaines √©tapes:"
echo "  1. V√©rifier les logs: tail -f /var/log/gestionnairedeparc.pythonanywhere.com.error.log"
echo "  2. Tester l'application: https://www.guineegest.space"
echo "  3. Tester les modules corrig√©s:"
echo "     - /chauffeurs/ajouter/"
echo "     - /heures-supplementaires/"
echo "     - /paies-legacy/"
echo ""
echo "üìù Fichiers de sauvegarde cr√©√©s dans: $PROJECT_DIR"
echo ""
